import React, { useState, useEffect } from 'react';
import { system } from '../api';
// ‚òÖ‚òÖ‚òÖ –ù–ê–®–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (–¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô –°–ï–†–í–ò–°) ‚òÖ‚òÖ‚òÖ
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ `core`
import { workerManager } from '../services/WorkerManager';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
const HEAVY_TASK_SCRIPT = 'server/workers/heavy-task.js';

export default function SystemInfoPage() {
  // --- –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
  const [systemInfo, setSystemInfo] = useState(null);
  const [name, setName] = useState('–ú–∏—Ä');
  const [greeting, setGreeting] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  useEffect(() => {
    async function fetchInfo() {
      try {
        const info = await system.getSystemInfo();
        setSystemInfo(info);
      } catch (e) {
        setError(e.message);
      }
    }
    fetchInfo();
  }, []);

  const handleGreetClick = async () => {
    if (!name) {
      setError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }
    setIsLoading(true);
    setError('');
    try {
      const message = await system.greet(name);
      setGreeting(message);
    } catch (e) {
      setGreeting('');
      setError(e.message);
    } finally {
      setIsLoading(false);
    }
  };
  
  // --- –õ–æ–≥–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞, —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ–º–∞—è —á–µ—Ä–µ–∑ WorkerManager ---

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
  const [workerState, setWorkerState] = useState({
    id: null,
    status: 'Not running',
    progress: 0,
    isRunning: false,
  });

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ WorkerManager –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const handleStateUpdate = (allWorkers) => {
      // –í —ç—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
      let relevantState = null;
      for (const worker of allWorkers.values()) {
        if (worker.scriptPath === HEAVY_TASK_SCRIPT) {
          relevantState = worker;
          break; // –ù–∞—à–ª–∏, –≤—ã—Ö–æ–¥–∏–º
        }
      }

      if (relevantState) {
        setWorkerState({
          id: relevantState.id,
          status: relevantState.status,
          progress: relevantState.progress,
          isRunning: relevantState.isRunning,
        });
      } else {
        // –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä–∞ –Ω–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ
        setWorkerState({
          id: null,
          status: 'Ready to start a new one.',
          progress: 0,
          isRunning: false,
        });
      }
    };

    // workerManager.subscribe –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    const unsubscribe = workerManager.subscribe(handleStateUpdate);

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => unsubscribe();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–¥–Ω–∞ –Ω–∞ –≤–µ—Å—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª

  const handleStartWorker = () => {
    if (workerState.isRunning) return;
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É
    workerManager.startTask(
      HEAVY_TASK_SCRIPT,
      { command: 'start', iterations: 500_000_000 }
    );
  };

  const handleStopWorker = () => {
    if (!workerState.id) return;
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    workerManager.stopTask(workerState.id);
  };

  return (
    <div>
      <h1>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h1>
      <p>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞ Node.js —á–µ—Ä–µ–∑ API-–º–æ—Å—Ç.</p>
      {systemInfo ? (
        <ul>
          <li><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> {systemInfo.platform}</li>
          <li><strong>CPU:</strong> {systemInfo.cpu}</li>
          <li><strong>–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å:</strong> {systemInfo.freemem}</li>
        </ul>
      ) : (<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</p>)}
      <hr style={{ margin: '2rem 0' }} />
      <h2>–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ API —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏</h2>
      <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" disabled={isLoading} style={{ padding: '8px', fontSize: '1rem', minWidth: '200px' }} />
        <button className="btn" onClick={handleGreetClick} disabled={isLoading}>
          {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å'}
        </button>
      </div>
      {greeting && <p style={{ color: 'green', marginTop: '1em', fontSize: '1.2rem' }}>{greeting}</p>}
      {error && <p style={{ color: 'red', marginTop: '1em', fontSize: '1.2rem' }}>–û—à–∏–±–∫–∞: {error}</p>}
      <hr style={{ margin: '2rem 0' }} />
      <h2>–¢–µ—Å—Ç –§–æ–Ω–æ–≤–æ–≥–æ –í–æ—Ä–∫–µ—Ä–∞</h2>
      <p>–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI. –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º.</p>
      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '1rem' }}>
        <button className="btn" onClick={handleStartWorker} disabled={workerState.isRunning}>
          üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É
        </button>
        <button className="btn" onClick={handleStopWorker} disabled={!workerState.isRunning}>
          üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>
      </div>
      <div>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {workerState.status}</p>
        {workerState.isRunning && (
           <div style={{ width: '100%', backgroundColor: '#e0e0e0', borderRadius: '4px' }}>
             <div style={{ width: `${workerState.progress}%`, backgroundColor: '#3B82F6', color: 'white', textAlign: 'center', padding: '4px', borderRadius: '4px', transition: 'width 0.2s ease' }}>
               {workerState.progress}%
             </div>
           </div>
        )}
      </div>
    </div>
  );
}
import React, { useState, useEffect, useCallback } from 'react';
import { system, core } from '../api';

export default function SystemInfoPage() {
  const [systemInfo, setSystemInfo] = useState(null);
  const [name, setName] = useState('–ú–∏—Ä');
  const [greeting, setGreeting] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const [workerId, setWorkerId] = useState(null);
  const [workerStatus, setWorkerStatus] = useState('Not running');
  const [workerProgress, setWorkerProgress] = useState(0);

  // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2 (—á–∞—Å—Ç—å 2) ‚òÖ‚òÖ‚òÖ
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 'ready'
  const handleWorkerMessage = useCallback((id, data) => {
    if (id !== workerId) return;

    // –®–ê–ì 2: –í–æ—Ä–∫–µ—Ä –≥–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å—Ç–∞—Ä—Ç
    if (data.type === 'ready') {
      setWorkerStatus('Worker is ready. Sending task...');
      core.postMessageToWorker(id, { command: 'start', iterations: 500_000_000 });
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ —Å—Ç–∞—Ç—É—Å–µ
    if (data.type === 'progress') {
      setWorkerProgress(data.value);
    } else {
      setWorkerStatus(data.value);
    }
  }, [workerId]);

  const handleWorkerExit = useCallback((id, code) => {
    if (id !== workerId) return;
    setWorkerStatus(`Worker exited with code ${code}. Ready to start a new one.`);
    setWorkerId(null);
    setWorkerProgress(0);
  }, [workerId]);

  useEffect(() => {
    const cleanupMessage = core.onWorkerMessage(handleWorkerMessage);
    const cleanupExit = core.onWorkerExit(handleWorkerExit);
    
    return () => {
      cleanupMessage();
      cleanupExit();
    };
  }, [handleWorkerMessage, handleWorkerExit]);
  
  // ‚òÖ‚òÖ‚òÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2 (—á–∞—Å—Ç—å 3) ‚òÖ‚òÖ‚òÖ
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –∏ –∂–¥–µ—Ç
  const handleStartWorker = async () => {
    if (workerId) return;
    try {
      // –®–ê–ì 1: –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
      setWorkerStatus('Starting worker...');
      const { workerId: newWorkerId } = await core.createWorker('server/workers/heavy-task.js');
      setWorkerId(newWorkerId);
      setWorkerStatus('Worker started, waiting for ready signal...');
    } catch (e) {
      setWorkerStatus(`Error: ${e.message}`);
    }
  };

  // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleStopWorker = async () => {
    if (!workerId) return;
    try {
      await core.terminateWorker(workerId);
    } catch (e) {
      setWorkerStatus(`Error: ${e.message}`);
    }
  };
  
  useEffect(() => {
    async function fetchInfo() {
      try {
        const info = await system.getSystemInfo();
        setSystemInfo(info);
      } catch (e) {
        setError(e.message);
      }
    }
    fetchInfo();
  }, []);

  const handleGreetClick = async () => {
    if (!name) {
      setError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }
    setIsLoading(true);
    setError('');
    try {
      const message = await system.greet(name);
      setGreeting(message);
    } catch (e) {
      setGreeting('');
      setError(e.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div>
      <h1>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h1>
      <p>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞ Node.js —á–µ—Ä–µ–∑ API-–º–æ—Å—Ç.</p>
      {systemInfo ? (
        <ul>
          <li><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> {systemInfo.platform}</li>
          <li><strong>CPU:</strong> {systemInfo.cpu}</li>
          <li><strong>–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å:</strong> {systemInfo.freemem}</li>
        </ul>
      ) : (<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</p>)}
      <hr style={{ margin: '2rem 0' }} />
      <h2>–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ API —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏</h2>
      <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" disabled={isLoading} style={{ padding: '8px', fontSize: '1rem', minWidth: '200px' }} />
        <button className="btn" onClick={handleGreetClick} disabled={isLoading}>
          {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å'}
        </button>
      </div>
      {greeting && <p style={{ color: 'green', marginTop: '1em', fontSize: '1.2rem' }}>{greeting}</p>}
      {error && <p style={{ color: 'red', marginTop: '1em', fontSize: '1.2rem' }}>–û—à–∏–±–∫–∞: {error}</p>}
      <hr style={{ margin: '2rem 0' }} />
      <h2>–¢–µ—Å—Ç –§–æ–Ω–æ–≤–æ–≥–æ –í–æ—Ä–∫–µ—Ä–∞</h2>
      <p>–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI.</p>
      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '1rem' }}>
        <button className="btn" onClick={handleStartWorker} disabled={!!workerId}>
          üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É
        </button>
        <button className="btn" onClick={handleStopWorker} disabled={!workerId}>
          üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>
      </div>
      <div>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {workerStatus}</p>
        {workerId && (
           <div style={{ width: '100%', backgroundColor: '#e0e0e0', borderRadius: '4px' }}>
             <div style={{ width: `${workerProgress}%`, backgroundColor: '#3B82F6', color: 'white', textAlign: 'center', padding: '4px', borderRadius: '4px', transition: 'width 0.2s ease' }}>
               {workerProgress}%
             </div>
           </div>
        )}
      </div>
    </div>
  );
}
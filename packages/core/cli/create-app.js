#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const projectNameInput = process.argv[2];

if (!projectNameInput) {
  console.error('–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
  console.log('–ü—Ä–∏–º–µ—Ä: npx all-day-long-core "My Awesome App"');
  process.exit(1);
}

// --- –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞ ---
const projectName = projectNameInput; // "My Awesome App"
const projectSlug = projectName.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''); // "my-awesome-app"
const projectAppId = `com.company.${projectSlug}`; // "com.company.my-awesome-app"

const projectDir = path.resolve(process.cwd(), projectSlug);

if (fs.existsSync(projectDir)) {
  console.error(`–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${projectSlug}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
  process.exit(1);
}

const templateDir = path.join(__dirname, '..', 'template');

console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ "${projectName}" –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${projectDir}...`);

try {
  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞
  fs.mkdirSync(projectDir, { recursive: true });
  fs.cpSync(templateDir, projectDir, { recursive: true });

  // --- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ---

  // 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: packages/app/longday.config.js
  const configPath = path.join(projectDir, 'packages', 'app', 'longday.config.js');
  let configFile = fs.readFileSync(configPath, 'utf8');
  configFile = configFile.replace(/productName: '.*?'/, `productName: '${projectName}'`);
  configFile = configFile.replace(/appId: '.*?'/, `appId: '${projectAppId}'`);
  configFile = configFile.replace(/title: ".*?"/, `title: "${projectName}"`);
  fs.writeFileSync(configPath, configFile);
  console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.');

  // 2. –§–∞–π–ª –ø–∞–∫–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: packages/app/package.json
  const appPackageJsonPath = path.join(projectDir, 'packages', 'app', 'package.json');
  let appPackageJson = JSON.parse(fs.readFileSync(appPackageJsonPath, 'utf8'));
  appPackageJson.name = projectSlug; // –ò–º—è –ø–∞–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
  appPackageJson.description = `The application for the ${projectName} project.`;
  fs.writeFileSync(appPackageJsonPath, JSON.stringify(appPackageJson, null, 2));
  console.log('‚úÖ –ü–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
  
  // 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞: packages/app/electron-builder.config.js
  const builderConfigPath = path.join(projectDir, 'packages', 'app', 'electron-builder.config.js');
  // –≠—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ longday.config.js, —Ç–∞–∫ —á—Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å,
  // –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–∏–º –ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—ã –æ –Ω–µ–º –ø–æ–º–Ω–∏–º.
  if (fs.existsSync(builderConfigPath)) {
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
  }

  // 4. –ö–æ—Ä–Ω–µ–≤–æ–π package.json –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  const rootPackageJsonPath = path.join(projectDir, 'package.json');
  let rootPackageJson = JSON.parse(fs.readFileSync(rootPackageJsonPath, 'utf8'));
  rootPackageJson.name = `${projectSlug}-monorepo`;
  fs.writeFileSync(rootPackageJsonPath, JSON.stringify(rootPackageJson, null, 2));
  console.log('‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π –ø–∞–∫–µ—Ç –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');

  console.log('\nüöÄ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  console.log('\n–¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:');
  console.log(`\n  cd ${projectSlug}`);
  console.log('  npm install');
  console.log('  npm run dev\n');

} catch (error) {
  console.error('\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
  console.error(error);
  if (fs.existsSync(projectDir)) {
    fs.rmSync(projectDir, { recursive: true, force: true });
  }
  process.exit(1);
}
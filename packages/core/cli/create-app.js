#!/usr/bin/env node

const fs = require('fs');
const fse = require('fs-extra');
const path = require('path');

console.log('--- –ó–∞–ø—É—Å–∫ all-day-long-core create-app ---');

let projectDir;

try {
  const projectNameInput = process.argv[2];

  if (!projectNameInput) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
    console.log('–ü—Ä–∏–º–µ—Ä: npx all-day-long-core "My Awesome App"\n');
    process.exit(1);
  }

  const projectName = projectNameInput;
  const projectSlug = projectName.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
  const projectAppId = `com.company.${projectSlug}`;

  projectDir = path.resolve(process.cwd(), projectSlug);
  const templateDir = path.join(__dirname, '..', 'template');

  console.log(`–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: "${projectName}"`);
  console.log(`–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${projectDir}`);
  console.log(`–ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–∞: ${templateDir}`);

  if (!fs.existsSync(templateDir)) {
    console.error(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${templateDir}`);
    process.exit(1);
  }

  if (fs.existsSync(projectDir)) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${projectSlug}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n`);
    process.exit(1);
  }

  console.log(`\n–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${projectDir}...`);

  fse.copySync(templateDir, projectDir);

  console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞.');

  // --- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ---

  const configPath = path.join(projectDir, 'packages', 'app', 'longday.config.js');
  let configFile = fs.readFileSync(configPath, 'utf8');
  configFile = configFile.replace(/productName: '.*?'/, `productName: '${projectName}'`);
  configFile = configFile.replace(/appId: '.*?'/, `appId: '${projectAppId}'`);
  configFile = configFile.replace(/title: ".*?"/, `title: "${projectName}"`);
  fs.writeFileSync(configPath, configFile);
  console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.');

  const appPackageJsonPath = path.join(projectDir, 'packages', 'app', 'package.json');
  let appPackageJson = JSON.parse(fs.readFileSync(appPackageJsonPath, 'utf8'));
  
  // ‚òÖ‚òÖ‚òÖ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–î–ê–õ–Ø–ï–ú –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –í–ù–£–¢–†–ï–ù–ù–ï–ì–û –ü–ê–ö–ï–¢–ê ‚òÖ‚òÖ‚òÖ
  // appPackageJson.name = projectSlug; // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤—ã–∑—ã–≤–∞–ª–∞ –æ—à–∏–±–∫—É! –ú—ã –µ–µ —É–±–∏—Ä–∞–µ–º.
  appPackageJson.description = `The application part of the ${projectName} project.`;
  fs.writeFileSync(appPackageJsonPath, JSON.stringify(appPackageJson, null, 2));
  console.log('‚úÖ –ü–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');

  const rootPackageJsonPath = path.join(projectDir, 'package.json');
  let rootPackageJson = JSON.parse(fs.readFileSync(rootPackageJsonPath, 'utf8'));
  rootPackageJson.name = `${projectSlug}-monorepo`;
  fs.writeFileSync(rootPackageJsonPath, JSON.stringify(rootPackageJson, null, 2));
  console.log('‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π –ø–∞–∫–µ—Ç –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');

  console.log('\nüöÄ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  console.log('\n–¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:');
  console.log(`\n  cd ${projectSlug}`);
  console.log('  npm install');
  console.log('  npm run dev\n');

} catch (error) {
  console.error('\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
  console.error(error);

  if (projectDir && fs.existsSync(projectDir)) {
      console.log('\n–û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
      fs.rmSync(projectDir, { recursive: true, force: true });
  }
  process.exit(1);
}
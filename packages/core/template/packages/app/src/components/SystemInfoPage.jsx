import React, { useState, useEffect } from 'react';
import { system } from '../api';
import { workerManager } from '../services/WorkerManager';

const HEAVY_TASK_SCRIPT = 'server/workers/heavy-task.js';

export default function SystemInfoPage() {
  const [systemInfo, setSystemInfo] = useState(null);
  const [name, setName] = useState('–ú–∏—Ä');
  const [greeting, setGreeting] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  const [workerState, setWorkerState] = useState({
    id: null,
    status: 'Ready to start.',
    progress: 0,
    isRunning: false,
  });

  useEffect(() => {
    async function fetchInfo() {
      try {
        const info = await system.getSystemInfo();
        setSystemInfo(info);
      } catch (e) {
        setError(e.message);
      }
    }
    fetchInfo();
  }, []);

  useEffect(() => {
    // ‚òÖ‚òÖ‚òÖ –ù–ê–®–ï –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚òÖ‚òÖ‚òÖ
    const handleStateUpdate = (allWorkers) => {
      // –ò—â–µ–º –ê–ö–¢–ò–í–ù–´–ô –≤–æ—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É —Å–∫—Ä–∏–ø—Ç—É.
      const activeWorker = Array.from(allWorkers.values()).find(
        (w) => w.scriptPath === HEAVY_TASK_SCRIPT && w.isRunning
      );

      if (activeWorker) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ—Ä–∫–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –ø–æ –Ω–µ–º—É.
        setWorkerState({
          id: activeWorker.id,
          status: activeWorker.status,
          progress: activeWorker.progress,
          isRunning: activeWorker.isRunning,
        });
      } else {
        // –ï—Å–ª–∏ –ê–ö–¢–ò–í–ù–û–ì–û –≤–æ—Ä–∫–µ—Ä–∞ –Ω–µ—Ç, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.
        const lastFinishedWorker = Array.from(allWorkers.values())
          .filter(w => w.scriptPath === HEAVY_TASK_SCRIPT && !w.isRunning)
          .sort((a, b) => b.exitCode - a.exitCode) // –ü—Ä–æ—Å—Ç–æ –¥–ª—è –∫–∞–∫–æ–π-—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          .pop();

        if (lastFinishedWorker) {
            setWorkerState({
              id: lastFinishedWorker.id,
              status: lastFinishedWorker.status,
              progress: lastFinishedWorker.progress,
              isRunning: false, // –û–Ω —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            });
        } else {
             // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ, –Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            setWorkerState({
                id: null,
                status: '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.',
                progress: 0,
                isRunning: false,
            });
        }
      }
    };

    const unsubscribe = workerManager.subscribe(handleStateUpdate);
    return () => unsubscribe();
  }, []);

  const handleStartWorker = () => {
    if (workerState.isRunning) return;
    workerManager.startTask(
      HEAVY_TASK_SCRIPT,
      { command: 'start', iterations: 500_000_000 }
    );
  };

  const handleStopWorker = () => {
    if (!workerState.id || !workerState.isRunning) return;
    workerManager.stopTask(workerState.id);
  };
  
  const handleGreetClick = async () => {
    if (!name) {
      setError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }
    setIsLoading(true);
    setError('');
    try {
      const message = await system.greet(name);
      setGreeting(message);
    } catch (e) {
      setGreeting('');
      setError(e.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div>
      <h1>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h1>
      <p>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —Å —Å–µ—Ä–≤–µ—Ä–∞ Node.js —á–µ—Ä–µ–∑ API-–º–æ—Å—Ç.</p>
      {systemInfo ? (
        <ul>
          <li><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> {systemInfo.platform}</li>
          <li><strong>CPU:</strong> {systemInfo.cpu}</li>
          <li><strong>–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å:</strong> {systemInfo.freemem}</li>
        </ul>
      ) : (<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</p>)}
      <hr style={{ margin: '2rem 0' }} />
      <h2>–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ API —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏</h2>
      <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" disabled={isLoading} style={{ padding: '8px', fontSize: '1rem', minWidth: '200px' }} />
        <button className="btn" onClick={handleGreetClick} disabled={isLoading}>
          {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å'}
        </button>
      </div>
      {greeting && <p style={{ color: 'green', marginTop: '1em', fontSize: '1.2rem' }}>{greeting}</p>}
      {error && <p style={{ color: 'red', marginTop: '1em', fontSize: '1.2rem' }}>–û—à–∏–±–∫–∞: {error}</p>}
      <hr style={{ margin: '2rem 0' }} />
      <h2>–¢–µ—Å—Ç –§–æ–Ω–æ–≤–æ–≥–æ –í–æ—Ä–∫–µ—Ä–∞</h2>
      <p>–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI. –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º.</p>
      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '1rem' }}>
        <button className="btn" onClick={handleStartWorker} disabled={workerState.isRunning}>
          üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É
        </button>
        <button className="btn" onClick={handleStopWorker} disabled={!workerState.isRunning}>
          üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>
      </div>
      <div>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {workerState.status}</p>
        {(workerState.isRunning || workerState.progress > 0) && (
           <div style={{ width: '100%', backgroundColor: '#e0e0e0', borderRadius: '4px' }}>
             <div style={{ width: `${workerState.progress}%`, backgroundColor: '#3B82F6', color: 'white', textAlign: 'center', padding: '4px', borderRadius: '4px', transition: 'width 0.2s ease' }}>
               {workerState.progress > 0 ? `${workerState.progress}%` : ''}
             </div>
           </div>
        )}
      </div>
    </div>
  );
}